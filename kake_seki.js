/*---------------iOSの場合は，マウスイベントをタッチイベントに変更することmousedown --> touchstartmousemove --> touchmovemouseup   --> touchend or touchevent以前の注意書き----------------*/// ----------------タッチイベントが利用可能かの判別-------------------------var supportTouch = 'ontouchend' in document;// イベント名var E_TOUCHSTART = supportTouch ? 'touchstart' : 'mousedown';var E_TOUCHMOVE = supportTouch ? 'touchmove' : 'mousemove';var E_TOUCHEND = supportTouch ? 'touchend' : 'mouseup';//=====================================================================function draw(id) {    var canvas = document.getElementById(id);    if (canvas == null)    	return false;		var context = canvas.getContext('2d');var mx;var my;var bx;var byvar num;//-------ten_keyからの入力数字var knum1;var knum2var good;good=0;var st;st=2;var keta;var keta10;keta10=0;var jjketa;jjketa=0;var kk;//--------問題を進めるカウンタ・ten_keyクリックで加算kk=0;var i;var j;var k;var p;var ran=[];var jjrnd;var kuku=[];var p36=[];var dam;const pinp = new Audio('pinpon.mp3');const bu = new Audio("bubu.mp3");//----------kuku36----------p36[0]=4;p36[1]=6;p36[2]=9;p36[3]=8;p36[4]=12;p36[5]=16;p36[6]=10;p36[7]=15;p36[8]=20;p36[9]=25;p36[10]=12;p36[11]=18;p36[12]=24;p36[13]=30;p36[14]=36;p36[15]=14;p36[16]=21;p36[17]=28;p36[18]=35;p36[19]=42;p36[20]=49;p36[21]=16;p36[22]=24;p36[23]=32;p36[24]=40;p36[25]=48;p36[26]=56;p36[27]=64;p36[28]=18;p36[29]=27;p36[30]=36;p36[31]=45;p36[32]=54;p36[33]=63;p36[34]=72;p36[35]=81;//----------------		bgcolor();		ten_key();		if(kk==0){msg01();}function pinbu (a,b){	var a;	var b;	if (a==0) {		pinp.volume = b;		pinp.play();		} else {		bu.volume = b;		bu.play();		}}function msg01(){		context.fillStyle = 'blue';		context.font = "32px Arial";		context.fillText("[ S ] でスタート！", 35,200);}function stboot(){	if (st==0){		kk=0;		jjketa=0;		bgcolor();		ten_key();		mondai();		kk=0;		syutudai();	}}//--------------------問題作成function mondai(){		random();		for(i=0; i<=35; i++){kuku[i]=p36[ran[i]];}}//--------------------出題function syutudai(){	if(kk<=35){		dam=kuku[kk];				context.fillStyle = 'blue';		context.font = "128px Arial";		if (dam>=10){			context.fillText(dam, 80,150);			} else {			context.fillText(dam, 120,150);		}	} else {		swch=1;		time_color();		context.fillStyle = 'blue';		context.font = "32px Arial";		if(good==36){		context.fillText("全問正解！！", 70,50);		} else {			context.fillText(good+" 問正解！", 70,50);		}		context.font = "24px Arial";		context.fillText("("+ kk +" 問中)", 100,80);		w_time(stp,100,120,1)	}}		//--------------------解答判定function hantei(){		if (keta10==kuku[kk]) {					context.fillStyle = 'green';			context.font = "18px Arial";			context.fillText(knum1+"x"+knum2+"="+dam, 10+80*(kk%4),335-20*(Math.floor(kk/4)));			good++;			pinbu(0,0.5);		} else {			context.fillStyle = 'red';			context.font = "18px Arial";			context.fillText(dam, 10+80*(kk%4),335-20*(Math.floor(kk/4)));			pinbu(1,0.5);		}}//--------------------入力function nyuryoku(){	if (jjketa==0){		keta10=num;		knum1=num;		jjketa=1;	} else {		keta10=keta10*num;		knum2=num;		jjketa=0;	}//console.log(keta10,dam,kuku[kk],kk,jjketa,p);}//--------------------入力ここまで//--------------------乱数（0から36）function random(){	ran[0]=Math.floor(Math.random() * 36) ;	k=1;	while(k<=35){		jjrnd=0;		dam=Math.floor(Math.random() * 36);		for (i=0; i<k; i++){if (ran[i]==dam){jjrnd=1;}}		if (jjrnd==1) { } else {ran[i]=dam; k++;}	}}//----------------	function bgcolor(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(0,0,320,500);	}		function time_color(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(0,0,200,28);	}		//-----テンキー押下時の着色関数	function ten_color(){		context.fillStyle='rgba(0, 255, 0, 0.5)';		if(((mx>0 && mx<240) && (my>340 && my<460)) || (mx>80 && mx<160) && (my>460 && my<500)){			fillRoundRect(context, bx, by, 78, 38, 5);			//---以下で0.5秒( 500 )まち色づけをなくす			setTimeout(function(){ten_key();},500);		}	}			function seki_waku(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(80,55,140,100);	}		function ten_key(){		var i;		var j;		context.fillStyle='#afeeee'		for(i=0; i<4; i++){			for (j=0; j<4; j++){				//context.fillRect(60+i*50,340+j*40,48,38,2,2);				//fillRoundRect(context,　60+i*50,340+j*40, 48, 38, 5);				fillRoundRect(context,　i*80,340+j*40, 78, 38, 5);			}		}		//-----テンキー表示-----		context.fillStyle = 'blue';		context.font = "24px Arial";		context.fillText("0",112,488);		for(i=0; i<3; i++){			for(j=0; j<3; j++){			context.fillText(j*3+i+1,32+i*80,448-j*40);//-----1〜9まで表示			}		}		//context.fillText("↑",80+3*50,488-3*40);		//context.fillText("↓",80+3*50,488-2*40);		//context.fillText("r",80+3*50,488-40);		context.fillText("S",32+3*80,488);		context.fillText("c",32+2*80,488);		//context.fillText("R",32,488);				//if(updn==1){context.fillStyle='rgba(255, 125, 0, 0.3)';context.fillRect(210,340,50,40);}		//if(updn==0){context.fillStyle='rgba(255, 125, 0, 0.3)';context.fillRect(210,380,50,40);}		//if(updn==2){context.fillStyle='rgba(255, 125, 0, 0.3)';context.fillRect(210,420,50,40);}	}	function ten_key_basyo(){	if((mx>0 && mx<320) && (my>340 && my<500)){		//if((mx>210 && mx<260) && (my>340 && my<380)){updn=1;}	//if((mx>210 && mx<260) && (my>380 && my<420)){updn=0;}	//if((mx>210 && mx<260) && (my>420 && my<460)){updn=2;}	if((mx>240 && mx<320) && (my>460 && my<500)){st=0;swch=0}//----------スタートボタン	if((mx>160 && mx<240) && (my>460 && my<500)){		//st=0;		swch=1;		bgcolor();		ten_key();		msg01();	}			if((mx>0 && mx<80) && (my>340 && my<380)){num=7;bx=0;by=340;}	if((mx>80 && mx<160) && (my>340 && my<380)){num=8;bx=80;by=340;}	if((mx>160 && mx<240) && (my>340 && my<380)){num=9;bx=160;by=340;}	if((mx>0 && mx<80)&&(my>380 && my<420)){num=4;bx=0;by=380;}	if((mx>80 && mx<160)&&(my>380 && my<420)){num=5;bx=80;by=380;}	if((mx>160 && mx<240)&&(my>380 && my<420)){num=6;bx=160;by=380;}	if((mx>0 && mx<80)&&(my>420 && my<460)){num=1;bx=0;by=420;}	if((mx>80 && mx<160)&&(my>420 && my<460)){num=2;bx=80;by=420;}	if((mx>160 && mx<240)&&(my>420 && my<460)){num=3;bx=160;by=420;}	if((mx>80 && mx<160)&&(my>460 && my<500)){num=0;bx=80;by=460;}//---------------------------------------------------------------------//====================スタート・入力ーここから====================	nyuryoku();//------入力	if (st==0){		ms00 = Date.now();		if (swch==0){Tm()}		stboot();//-----------------ここがスタート		kk=0;		kk2=0;		syutudai();		st=1;		}else{			if(st==2){		//-----表示しない			} else {					if(((mx>0 && mx<240) && (my>340 && my<460)) || (mx>80 && mx<160) && (my>460 && my<500)){				if(jjketa==0){					hantei();					kk++;					//bgcolor();					seki_waku();					ten_key();					syutudai();					}				}//-----正誤判定			}		}		} else {	//-----ten_kyeの範囲外ではなにもしない	}	//-----テンキー押下時の色づけ	ten_color();		}	//====================スタート・入力ーここまで====================var stp;//---開始時刻と現在時刻との差var ms00;//---開始時刻var swch;var swj;var ttm=0;//---合計時間//====================================================function Tm(){//-----単純なストップウォッチ　ここから	//ms00 = Date.now();//Date.now()は現在時刻をミリ秒で示す//-----現在時刻取得と時計描画を、10ミリ秒ごとに実行する	setInterval(() => {		stp = Date.now() - ms00;//スタート時と現在の時間差		if(swch==0){		time_color();//---時間表示のためのマスク		context.fillStyle = 'red';		context.font = "20px Arial";		w_time(stp, 120, 20, 0);//---経過時間表示	}	}, 10);//-----単純なストップウォッチ　ここまで}//---function Tm()function w_time(tt,x,y,fg){		var tt;x;y;fg;		var m = Math.floor(tt / 60000);		var s = Math.floor(tt % 60000 / 1000);		var ms = tt % 1000;			m = ('0' + m).slice(-2); 		s = ('0' + s).slice(-2);		ms = ('0' + ms).slice(-2);		//context.fillStyle = 'red';		//context.font = "20px Arial";		if(fg==0){context.fillText(m+"\'"+ s + "\""+ms, x, y);}		if(fg==1){context.fillText(m+"分"+ s + "秒", x, y);}}//====================================================//------マル四角を描画するfunction-----//------https://qiita.com/PG0721/items/6fb9e9c02675be832402---よりfunction fillRoundRect(context, x, y, w, h, r) {    createRoundRectPath(context, x, y, w, h, r);    context.fill();}function createRoundRectPath(context, x, y, w, h, r) {    context.beginPath();    context.moveTo(x + r, y);    context.lineTo(x + w - r, y);    context.arc(x + w - r, y + r, r, Math.PI * (3/2), 0, false);    context.lineTo(x + w, y + h - r);    context.arc(x + w - r, y + h - r, r, 0, Math.PI * (1/2), false);    context.lineTo(x + r, y + h);           context.arc(x + r, y + h - r, r, Math.PI * (1/2), Math.PI, false);    context.lineTo(x, y + r);    context.arc(x + r, y + r, r, Math.PI, Math.PI * (3/2), false);    context.closePath();}//------マル四角を描画するfunctionここまで-----//----Canvas全体をクリアするfunctionfunction cls(){	context.clearRect(0,0,canvas.width,canvas.height);}//-----ここからマウスの位置を取得するcanvas.addEventListener(E_TOUCHSTART, onTouchStart);	function onTouchStart(e) {	canvas.addEventListener(E_TOUCHMOVE, onTouchMove);	canvas.addEventListener(E_TOUCHEND, onTouchEnd);}function onTouchMove(e) {	//cls();}function onTouchEnd(e) {	canvas.removeEventListener(E_TOUCHMOVE, onTouchMove);	canvas.removeEventListener(E_TOUCHEND, onTouchEnd);	ten_key();	mx=e.pageX;	my=e.pageY;	//console.log("x= "+mx+" : y= "+my)//------コンソールに座標を表示		ten_key_basyo();	}//	}	//----ここまで// デフォルトのイベントを禁止	document.ontouchmove = function(evt){	evt.preventDefault();	}}