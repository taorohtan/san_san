//---------------------------------------------------------------------//あとの時こく・間の時間・まえの時こく　の順番に関数も書きかえてある//bunM bun00 bun01 bun02//-----時間線分は3パターンとも青・赤の順番とした//-----時計の時間経過の色分けは，円弧の表示とした(context.lineWidth = 14)//-----（長針の動かない方の時計に円弧を表示する）// ----------------タッチイベントが利用可能かの判別-------------------------var supportTouch = 'ontouchend' in document;// イベント名var E_TOUCHSTART = supportTouch ? 'touchstart' : 'mousedown';var E_TOUCHMOVE = supportTouch ? 'touchmove' : 'mousemove';var E_TOUCHEND = supportTouch ? 'touchend' : 'mouseup';//=====================================================================function draw(id) {    var canvas = document.getElementById(id);    if (canvas == null)    	return false;		var context = canvas.getContext('2d');var mx;var my;var num;var mon;	mon=0;var pp=[];var kotae;var kotae1;var kotae2;var seito;var jt;//-----現在時刻表示判定用jt=0;var jg;//-----開始時の時計の表示を一致させるための判定用jg=0;var jk;//-----時間決定時の判定用jk=0;var jm;//-----分決定時の判定用jm=0;var js;//------音判定用js=0;var jmd;//-----問題作成時の判定用jmd=0;var mny;//-----［時・分］表示の判定mny=0;var hh;var mm;var mp;var mp2;var am;var dm=[];dm[0]=5;dm[1]=10;dm[2]=15;dm[3]=20;dm[4]=25;dm[5]=30;var km=[];var lm=[];var hm=[];var qno;//-----問題番号qno=0;var ran=[];var jjrnd;var k;var dam;var ptn;//-----問題パターンの設定：ptn=0 はn分後・ptn=2 はn分前const pinp = new Audio('pinpon.mp3');const bu = new Audio("bubu.mp3");//-----現在時刻取得と時計描画を、1000ミリ秒ごとに実行するsetInterval(() => {	const h = _getCurTime().hour;	const min = _getCurTime().min;	const sec = _getCurTime().sec;	if (jt==0){		tokei_a(h,min,sec);		tokei_b(h,min,sec);	}}, 1000);bgcolor();bgcolor2();t_line();bunM();doit();function main(){jt=1;cls();bgcolor();bgcolor2();t_line();ten_key();ten_key_basyo();kaito();if(jmd==0){mondai();}syutudai();nyuryoku();select();fig();t_move(hh,mm);console.log(mp2)}//-----functions//-----問題文function doit(){	if(jt==0){		if((mx>128 && mx<188) && (my>230 && my<260)){ptn=0;}//my=200;mx=mp;はダミー		if((mx>210 && mx<288) && (my>230 && my<260)){ptn=1;}		if((mx>310 && mx<370) && (my>230 && my<260)){ptn=2;}		mon=0;jk=0;jm=0;js=0;jg=0;kotae=0;my=200;if(ptn==0||ptn==1){mx=mp;}		mondai();syutudai();	} else {}}function bunM(){	context.fillStyle = "blue";	context.font = "18px Arial";	context.fillText("あとの",132,240);context.fillText("時こく",132,260);	context.fillText("あいだの",214,240);context.fillText("時間",232,260);	context.fillText("まえの",314,240);context.fillText("時こく",314,260);	context.fillStyle='rgba(0, 125, 125, 0.3)';		fillRoundRect(context,　128,222, 60, 42, 6);	fillRoundRect(context,　210,222, 78, 42, 6);	fillRoundRect(context,　310,222, 60, 42, 6);}function bun00(){	context.fillStyle = "blue";	context.font = "20px Arial";	context.fillText(hh+"時"+mm+"分から"+am+"分たつと，",20,226);	context.fillText("時こくは何時何分ですか。",20,250);	context.fillStyle='rgba(255, 0, 0, 0.1)';	context.fillRect(10,205,260,50);	if(am==60){context.fillStyle = "red";context.font = "20px Arial";context.fillText("６０分は１時間です。",300,266);}}function bun01(){	context.fillStyle = "blue";	context.font = "20px Arial";	context.fillText(hh+"時"+mm+"分から "+(hh+1)+"時"+am+"分まで",20,226);	context.fillText("の　時間は何分ですか。",20,250);	context.fillStyle='rgba(0, 255, 0, 0.2)';	context.fillRect(10,205,266,50);}function bun02(){	context.fillStyle = "blue";	context.font = "20px Arial";	context.fillText(hh+"時"+mm+"分の"+am+"分まえの",20,226);	context.fillText("時こくは何時何分ですか。",20,250);	context.fillStyle='rgba(0, 255, 0, 0.2)';	context.fillRect(10,205,260,50);	if(am==60){context.fillStyle = "red";context.font = "20px Arial";context.fillText("６０分は１時間です。",300,266);}}function syutudai(){	hh=hm[qno];	if(ptn==0){mm=60-km[qno];am=km[qno]+lm[qno];seito=(hh+1)*100+(mm+am)-60;bun00();yaji_R();}	if(ptn==1){mm=60-km[qno];am=lm[qno];seito=60-mm+am;bun01();yaji_R();}	if(ptn==2){mm=km[qno];am=km[qno]+lm[qno];seito=(hh-1)*100+(60+mm) - am;bun02();yaji_L();}}function mondai(){	var i;	rndm(6);	for (i=0;i<6;i++){km[i]=dm[ran[i]-1];}	rndm(6);	for (i=0;i<6;i++){lm[i]=dm[ran[i]-1];}	rndm(10);	for (i=0;i<6;i++){hm[i]=ran[i]+1;}	jmd=1;}//--------------------乱数function rndm(a){	var a;	var i;	ran[0]=Math.floor(Math.random() * a) +1 ;	k=1;	while(k<=a-1){		jjrnd=0;		dam=Math.floor(Math.random() * a) +1;		for (i=0; i<k; i++){if (ran[i]==dam){jjrnd=1;}}		if (jjrnd==1) { } else {ran[i]=dam; k++;}	}}//-----時間線分function t_line(){	var i;	context.beginPath();	context.lineWidth = 2;//-----線の太さ	context.moveTo(10, 190);	context.lineTo(490,190);	context.closePath();	context.strokeStyle='black'	context.stroke();	for(i=0;i<25;i++){	context.beginPath();	if(i%2==0){		if (i==12){context.lineWidth=3;context.moveTo(10+i*20,170);context.lineTo(10+i*20,190);}		context.moveTo(10+i*20,180);		context.lineTo(10+i*20,190);		context.closePath();		} else {		context.lineWidth = 2;		context.moveTo(10+i*20,185);		context.lineTo(10+i*20,190);		context.closePath();		}	context.strokeStyle='black'	context.stroke();	}}//-----時間線分上のポイントを動かすfunction t_move(a,b){	var a;var b;	if(ptn==0 || ptn==1){hh=a;mp=b;}	if(ptn==2){hh=a-1;mp=b+60;}	if(jg==0){mp2=mp;}//-----開始時の時計の表示を一致させるため		if(ptn==0){		tokei_a(hh,mp,-1);		tokei_b(hh,mp2,-1);		oh_gi(mp,mp2,0);//-----扇型描画		}		if(ptn==1){		tokei_a(hh,mp,-1);		tokei_b(hh+1,am,-1);		oh_gi(mp,mp2,0);//-----扇型描画		}		if(ptn==2){		tokei_a(hh,mp2,-1);		tokei_b(hh,mp,-1);		oh_gi(mp,mp2,260);//-----扇型描画		}	jg=1;		if(jt==1){//-----メニュー表示のとき前のデータを表示しないため	context.fillStyle = 'blue';	context.font = "20px Arial";	context.fillText(hh+1+"時",240,160);	context.fillStyle = 'blue';	context.font = "20px Arial";	context.fillText(hh+"時",10,160);	context.fillStyle = 'blue';	context.font = "20px Arial";	context.fillText(hh+2+"時",456,160);	}else{}		if(ptn==0){if((my>160 && my<250) && mx>4*mp+10 && mx<=4*mp+4*am+10){mm=(mx-10)/4;mp2=mm;}}	if(ptn==2){if((my>160 && my<250) && mx<4*mp+10 && mx>=4*mp-4*am+10){mm=(mx-10)/4;mp2=mm;}}	if(ptn==1){if((my>160 && my<250) && mx>4*mp+10 && mx<=4*(am+60)+10){mm=(mx-10)/4;mp2=mm;}}		//context.beginPath();		context.lineWidth = 8;//-----線の太さ		if(ptn==0){		if(my<250){			if(mx-10>240){				ptn_00();			}else{			context.beginPath();				context.moveTo(4*mp+10,190);				context.lineTo(4*mp2+10,190);			context.closePath();				context.strokeStyle='rgba(0, 0, 255, 0.6)';			context.stroke();						}		} else{			ptn_00();		}	}		if(ptn==1){		if(my<250){			if(mx-10>240){				ptn_00();			}else{			context.beginPath();				context.moveTo(4*mp+10,190);				context.lineTo(4*mp2+10,190);			context.closePath();				context.strokeStyle='rgba(0, 0, 255, 0.6)';			context.stroke();						}		} else{			ptn_00();		}	}		if(ptn==2){//-----間の時間		if(my<250){			if(mx-10<240){				ptn_00();			}else{			context.beginPath();				context.moveTo(4*mp+10,190);				context.lineTo(4*mp2+10,190);			context.closePath();				//context.strokeStyle='rgba(0, 0, 255, 0.6)';				context.strokeStyle='rgba(225, 0, 0, 0.5)';			context.stroke();						}		} else{			ptn_00();		}	}				function ptn_00(){			context.beginPath();				context.moveTo(4*mp+10,190);				context.lineTo(240+10,190);			context.closePath();				if(ptn==2){context.strokeStyle='rgba(225, 0, 0, 0.5)';}				else{context.strokeStyle='rgba(0, 0, 255, 0.6)';}			context.stroke();			context.beginPath();				context.moveTo(240+10,190);				context.lineTo(4*mp2+10,190);			context.closePath();				if(ptn==2){context.strokeStyle='rgba(0, 0, 255, 0.6)';}				else{context.strokeStyle='rgba(225, 0, 0, 0.5)';}			context.stroke();	}		if(jt==1){//-----メニュー表示のとき以外のデータを表示（jt=0がメニュー表示）		context.beginPath();		if(ptn==0){		context.arc(4*mp2+10,190,6,0,2*Math.PI,false);		context.arc(4*mp+10,190,6,0,2*Math.PI,false);		}		if(ptn==1){		context.arc(4*mp+10,190,6,0,2*Math.PI,false);		context.arc(4*(am+60)+10,190,6,0,2*Math.PI,false);		}		if(ptn==2){		context.arc(4*mp+10,190,6,0,2*Math.PI,false);		context.arc(4*mp2+10,190,6,0,2*Math.PI,false);		}		context.fillStyle='rgba(0, 0, 255, 1)';		context.fill();		}else{}console.log("x= "+mx+" : y= "+my+"num="+num);}//-----時間線分上のポイントを動かすここまで//----------扇型を描画function oh_gi(a,b,c){var a;var b;var c;//---a=mp:b=mp2 a=mp:b=am a=mp2:b=mp c=間隔(260)context.fillStyle='rgba(0, 0, 255, 0.1)';if(ptn==0 || ptn==1){	if (my<250){	if (mx-10>240){		og00();		}else{		context.lineWidth = 14;		context.beginPath();		context.arc(120+c, 90, 60, (a-15) * 6 * Math.PI / 180, (b-15) * 6 * Math.PI / 180, false);		//context.lineTo(120+c,90);		context.strokeStyle='rgba(0, 0, 255, 0.2)';		context.stroke();		context.closePath();		}	}else{		og00();	}}if(ptn==2){	if (my<250){	if (mx-10<240){		og00();		}else{		context.lineWidth = 14;		context.beginPath();		context.arc(120+c, 90, 60, (a-15) * 6 * Math.PI / 180, (b-15) * 6 * Math.PI / 180, true);		context.strokeStyle='rgba(255, 0, 0, 0.2)';		//context.lineTo(120+c,90);		context.stroke();		context.closePath();		}	}else{		og00();	}}	function og00(){		context.beginPath();		context.lineWidth = 14;			if(ptn==2){context.arc(120+c, 90, 60, (a-15) * 6 * Math.PI / 180, (60-15) * 6 * Math.PI / 180, true);}			else{context.arc(120+c, 90, 60, (a-15) * 6 * Math.PI / 180, (60-15) * 6 * Math.PI / 180, false);}			//context.strokeStyle='rgba(0, 0, 255, 0.2)';				if(ptn==2){context.strokeStyle='rgba(225, 0, 0, 0.2)';}				else{context.strokeStyle='rgba(0, 0, 255, 0.2)';}			//context.lineTo(120+c,90);			context.stroke();		context.closePath();		context.beginPath();			if(ptn==2){context.arc(120+c, 90, 60, (60-15) * 6 * Math.PI / 180, (b-15) * 6 * Math.PI / 180, true);}			else{context.arc(120+c, 90, 60, (60-15) * 6 * Math.PI / 180, (b-15) * 6 * Math.PI / 180, false);}			//context.strokeStyle='rgba(255, 0, 0, 0.2)';				if(ptn==2){context.strokeStyle='rgba(0, 0, 255, 0.2)';}				else{context.strokeStyle='rgba(225, 0, 0, 0.2)';}			//context.lineTo(120+c,90);			context.stroke();		context.closePath();	}}//----------扇型を描画ここまで//-----矢印function yaji_R(){	context.beginPath();	context.moveTo(270,90);	context.lineTo(250,110);	context.lineTo(250,100);	context.lineTo(230,100);	context.lineTo(230,80);	context.lineTo(250,80);	context.lineTo(250,70);	context.closePath();	context.fillStyle='rgba(0, 0, 255, 0.3)';	context.fill();}function yaji_L(){	context.beginPath();	context.moveTo(230,90);	context.lineTo(250,110);	context.lineTo(250,100);	context.lineTo(270,100);	context.lineTo(270,80);	context.lineTo(250,80);	context.lineTo(250,70);	context.closePath();	context.fillStyle='rgba(0, 0, 255, 0.3)';	context.fill();}//---時計Afunction tokei_a(h,m,s){var h;var m;var s;memori(120,90,80);t_moji(120,90,90,"18px Arial","blue");j_koku(120,90,h,m,s);context.beginPath();context.lineWidth = 2;context.arc(120,90,80,0,2*Math.PI,false);context.strokeStyle='rgba(0, 0, 255, 1)';context.stroke();}//-----時計Bfunction tokei_b(h,m,s){var h;var m;memori(380,90,80);t_moji(380,90,90,"18px Arial","blue");j_koku(380,90,h,m,s);context.beginPath();context.lineWidth = 2;context.arc(380,90,80,0,2*Math.PI,false);context.strokeStyle='rgba(0, 0, 255, 1)';context.stroke();}//-----時刻表示function j_koku(a, b, c, d, e){	var a; var b; var c; var d;//a:x b:y c:時 d:分 e:秒	  const h = c;      const min = d;	  const sec = e;      //短針を描画      const hourR = h * 30 * Math.PI / 180 + min * 0.5 * Math.PI / 180;      _setCtxStyle(context, '', 'red', 4);      _drawCtx(context, a, b, hourR, 0, -46);      //長針を描画      const minR = min * 6 * Math.PI / 180;      _setCtxStyle(context, '', 'blue', 4);      _drawCtx(context, a, b, minR, 0, -66);	  //秒針を描画	  if (e==-1) { } else {      const secR = sec * 6 * Math.PI / 180;      _setCtxStyle(context, '', 'green', 2);      _drawCtx(context, a, b, secR, 0, -56);	  }}function t_moji(a,b,h,s,c){//-----文字表示	var a;var b;var h;var s;var c;//a:x b:y h:半径 s:フォント"18px Arial" c:フォント色	var j;        const r12 = 360 / 12;        const hankei = h;        const moziPos = h -30 ;        const MathPi = Math.PI / 180;	const deg = j * r12;		for( j = 0 ; j < 12 ; j ++){        const deg = j * r12;		const mojiX = hankei + moziPos * Math.sin( deg * MathPi )+a-95;        const mojiY = hankei - moziPos * Math.cos( deg * MathPi )+b-84;		context.fillStyle = c;		context.font = s;	if (j==0){context.fillText(j+12,mojiX-6,mojiY);}else{context.fillText(j,mojiX,mojiY);}	}}//-----目盛表示function memori(a,b,c){	var a;var b;var c;//a:x b:y c:半径	context.beginPath();    context.arc(a, b, c, 0, 2 * Math.PI); //円のパスを設定　・・・補足１	context.fillStyle='#ffffe0'    context.fill(); //円のパスを塗りつぶす      //目盛を描画　・・・補足２      for (let i = 0; i < 60; i++) {          let r = 6 * Math.PI / 180 * i;           const w = i % 5 === 0 ? 4 : 1;           _setCtxStyle(context, '#ffffe0', 'black', w);          _drawCtx(context, a,b,r,c-10, 4);       }}function _setCtxStyle(context, fillColor, strokeColor, lineWidth) {      context.fillStyle = fillColor;      context.strokeStyle = strokeColor;      context.lineWidth = lineWidth;      context.lineCap = 'round';}function _drawCtx(context, a,b,rotation, moveToY = 0, length) {      var a; var b;//a:x b:y      context.save();      context.translate(a, b);      context.rotate(rotation);      context.beginPath();      context.moveTo(0, moveToY);      context.lineTo(0, moveToY + length);      context.stroke();      context.restore();}//現在時刻を取得function _getCurTime() {	const cur = new Date();	const time = {		hour : cur.getHours() % 12, //12時間制の数字		hourOriginal : cur.getHours(), //24時間制の数字		min :  cur.getMinutes(),		sec : cur.getSeconds()	};	return time;}//----------------function bgcolor(){		//context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillStyle='rgba(0, 255, 0, 0.5)'		context.fillRect(0,0,500,320);}function bgcolor2(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(0,190,500,320);}	//-----数値入力function nyuryoku(){		var h;var t; var o;		if((mx>3 && mx<333) && (my>290 && my<320)){			pp[mon]=num;			if (mon<2){mon++;}//---2桁まで入力		}}//-----数値入力表示function fig(){		var s1;		var ds;		context.fillStyle = 'red';		context.font = "24px Arial";		for (s1=0; s1<mon; s1++){			if(jk==1){				ds=80;				}else{ds=0}		if(ptn==1){ds=80;}		context.fillText(pp[s1],336+ds+s1*13,230);//175-----ansx+s1*13,ansy);//---13は字間		}		if(jk==1){context.fillStyle = 'red';context.font = "24px Arial";context.fillText(kotae1, 336,230);}		if(jm==1){context.fillStyle = 'red';context.font = "24px Arial";context.fillText(kotae2, 336+80,230);}}//-----正誤判定function hantei(){		if(seito==kotae){			context.fillStyle = 'red';context.font = "72px Arial";context.fillText("◯", 370,240);			jm=1;			pinbu (0,0.5);			if(ptn==1 && kotae==60){context.font = "20px Arial";context.fillText("６０分は１時間です。",300,266);}			if(qno<=4){mon=0;qno=qno+1;}		}else{			js=1;			if(js==1){pinbu (1,0.5);jk=0;}		}		mny=0;		if(qno==5){qno=0;mondai();}//-----5問終わった後問題を作る}//-----解答欄function kaito(){		context.lineWidth = 1;		context.fillStyle='rgba(0, 0, 255, 0.5)'		if(ptn==0 || ptn==2){context.strokeRect(330,205,45,30);}		context.strokeRect(330+80,205,45,30);		context.fillStyle = 'blue';		context.font = "20px Arial";		if(ptn==0 || ptn==2){context.fillText("時",380,230);}		context.fillText("分",460,230);}//-----　← M A N 押下時の処理function select(){	if((mx>333 && mx<500) && (my>290 && my<320)){			if(num==11){//-----　←			if(mon>0){mon=mon-1;}			if(js==1){mon=0;jk=0;jm=0;js=0;kotae=0;}			}					if(num==12){//-----M			mon=0;jk=0;jm=0;js=0;jg=0;kotae=0;if(ptn==0 || ptn==1){mx=mp;};my=200;//-----mx=mpは線分データを残さないため			jt=0;			cls();			bgcolor();			bgcolor2();			t_line();			bunM();		}				if(num==13){//-----　分			if(ptn==1){				mon=mon-1;				if(mon==0){kotae=pp[0];}				if(mon==1){kotae=pp[0]*10+pp[1];}				kotae2=kotae;				hantei();			}else{			if(mny==0){				mon=mon-1;				if(mon==0){kotae1=pp[0];}				if(mon==1){kotae1=pp[0]*10+pp[1];}				jk=1;				mon=0;				context.fillStyle='rgba(0, 225, 0, 0.2)'				context.fillRect(330,205,45,30);				mny=1;//-----表示が分に変わる				}else{				mon=mon-1;				if(mon==0){kotae2=pp[0];}				if(mon==1){kotae2=pp[0]*10+pp[1];}				kotae=kotae1*100+kotae2				hantei();				if(ptn==0){mp2=kotae2+60;}				if(ptn==2){mp2=kotae2;}				}			}		}		if(num==14){//-----　次			if(qno<=4){mon=0;jk=0;jm=0;js=0;jg=0;kotae=0;jmd=1;mny=0;				if(ptn==0 || ptn==1){mx=mp;}//-----mx=mpは線分データを残さないため				my=200;}			else{mon=0;jk=0;jm=0;js=0;jg=0;kotae=0;}		}	}}//-----テンキー表示function ten_key(){		context.fillStyle='#afeeee';		//fillRoundRect(context,　10,260, 23, 28, 5);				for(i=0; i<15; i++){			context.fillStyle='#afeeee'			fillRoundRect(context,　3+i*33,290, 32, 28, 5);			if (i<10){				context.fillStyle = 'blue';				context.font = "24px Arial";				if(i==9){context.fillText(i-9,3+9+9*33,313);				}else{context.fillText(i+1,3+9+i*33,313);}			}		}		context.fillStyle = 'blue';		context.font = "20px Arial";		context.fillText("←",3+7+10*33,313);		context.fillText("M",3+8+13*33,313);		if(ptn==1){context.fillText("分",4+6+11*33,313);}		else{			if(mny==0){context.fillText("時",3+6+11*33,313);}			if(mny==1){context.fillText("分",3+6+11*33,313);}		}		context.fillText("次",3+6+12*33,313);}//-----テンキー押下時の値取得function ten_key_basyo(){	rline();//点線丸囲いが描かれてしまうので入れておく	if((mx>3 && mx<36) && (my>290 && my<320)){num=1;}	if((mx>36 && mx<69) && (my>290 && my<320)){num=2;}	if((mx>69 && mx<102) && (my>290 && my<320)){num=3;}	if((mx>102 && mx<135) && (my>290 && my<320)){num=4;}	if((mx>135 && mx<168) && (my>290 && my<320)){num=5;}	if((mx>168 && mx<201) && (my>290 && my<320)){num=6;}	if((mx>201 && mx<234) && (my>290 && my<320)){num=7;}	if((mx>234 && mx<267) && (my>290 && my<320)){num=8;}	if((mx>267 && mx<300) && (my>290 && my<320)){num=9;}	if((mx>300 && mx<333) && (my>290 && my<320)){num=0;}	if((mx>333 && mx<366) && (my>290 && my<320)){num=11;}//-----　←	if((mx>366 && mx<399) && (my>290 && my<320)){num=13;}//-----　分	if((mx>399 && mx<432) && (my>290 && my<320)){num=14;}//-----　次	if((mx>432 && mx<465) && (my>290 && my<320)){num=12;}//-----　M	if((mx>465 && mx<499) && (my>290 && my<320)){}}//-----正誤判定音function pinbu (a,b){	var a;//--- 0:pinpon 1:bu	var b;//--- 音量 0-1(0.5)	if (a==0) {		pinp.volume = b;		pinp.play();		} else {		bu.volume = b;		bu.play();		}}//-----実線にもどすfunction rline(){		context.beginPath();		context.setLineDash([]);		context.closePath();}//------マル四角を描画するfunction-----//------https://qiita.com/PG0721/items/6fb9e9c02675be832402---よりfunction fillRoundRect(context, x, y, w, h, r) {    createRoundRectPath(context, x, y, w, h, r);    context.fill();}function createRoundRectPath(context, x, y, w, h, r) {    context.beginPath();    context.moveTo(x + r, y);    context.lineTo(x + w - r, y);    context.arc(x + w - r, y + r, r, Math.PI * (3/2), 0, false);    context.lineTo(x + w, y + h - r);    context.arc(x + w - r, y + h - r, r, 0, Math.PI * (1/2), false);    context.lineTo(x + r, y + h);           context.arc(x + r, y + h - r, r, Math.PI * (1/2), Math.PI, false);    context.lineTo(x, y + r);    context.arc(x + r, y + r, r, Math.PI, Math.PI * (3/2), false);    context.closePath();}//------マル四角を描画するfunctionここまで-----//----Canvas全体をクリアするfunctionfunction cls(){	context.clearRect(0,0,canvas.width,canvas.height);}//-----ここからマウスの位置を取得するcanvas.addEventListener(E_TOUCHSTART, onTouchStart);	function onTouchStart(e) {	canvas.addEventListener(E_TOUCHMOVE, onTouchMove);	canvas.addEventListener(E_TOUCHEND, onTouchEnd);}function onTouchMove(e) {	canvas.addEventListener(E_TOUCHMOVE, onTouchMove);	canvas.addEventListener(E_TOUCHEND, onTouchEnd);	//cls();	mx=e.pageX;	my=e.pageY;	if(my>160 && my<250){	main();	}//console.log("x= "+mx+" : y= "+my);}function onTouchEnd(e) {	canvas.removeEventListener(E_TOUCHMOVE, onTouchMove);	canvas.removeEventListener(E_TOUCHEND, onTouchEnd);	mx=e.pageX;	my=e.pageY;	doit();	main();	}// デフォルトのイベントを禁止	document.ontouchmove = function(evt){	evt.preventDefault();	}}//-------最終かっこ>>>function draw(id) { 