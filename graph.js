// ----------------タッチイベントが利用可能かの判別-------------------------var supportTouch = 'ontouchend' in document;// イベント名var E_TOUCHSTART = supportTouch ? 'touchstart' : 'mousedown';var E_TOUCHMOVE = supportTouch ? 'touchmove' : 'mousemove';var E_TOUCHEND = supportTouch ? 'touchend' : 'mouseup';//=====================================================================function draw(id) {    var canvas = document.getElementById(id);    if (canvas == null)    	return false;		var context = canvas.getContext('2d');var mx;var my;var ansx;var ansy;var n;var p;var haba;	haba=150;//---グラフ間の幅var one_m;//---ひとメモリの大きさvar vol;//---ぼうの大きさvar gpk;//---問題番号（10個）var ran=[];var jjrnd;var k;var dam;var pp=[];var mon;	mon=0;var kotae;	kotae=0;var kh1;var kh2;var kh3;var kh4;	kh1=0;kh2=0;kh3=0;kh4=0;var boh=[];var om=[];var bn=[];//-----om[ran[0]]  bn[boh[0]]om[0]=2;om[1]=3;om[2]=4;om[3]=5;om[4]=10;om[5]=20;om[6]=30;om[7]=40;om[8]=50;om[9]=100;//---1めもりの大きさbn[0]=3;bn[1]=5;bn[2]=7;//---ぼうの大きさ//---------------------------const pinp = new Audio('pinpon.mp3');const bu = new Audio("bubu.mp3");bgcolor();//gpk=0;	context.fillStyle='rgba(255, 0, 0, 0.1)'	context.fillRect(16,275,280,30);	ten_key();	context.fillStyle = 'bule';context.font = "24px Arial";	context.fillText("S をタッチして始めます", 25,300);	context.font = "16px Arial";	context.fillText("(1)左上から始めます",30,330);	context.fillText("(2)数字をタッチします。",30,350);	context.fillText("(3) ←で１文字もどります。",30,370);	context.fillText("(4)よければ〈答〉をタッチします。",30,390);	context.fillText("(5)２問できたら〈次〉をタッチします。",30,410);	//-----function main(){	//bgcolor_md();	bgcolor();	//-----表題	context.fillStyle='rgba(255, 0, 0, 0.1)'	context.fillRect(16,18,280,30);	context.fillStyle = 'blue';context.font = "20px Arial";	context.fillText("ぼうグラフの1めもりの大きさ", 20,40);		//----------	ten_key();	ten_key_basyo();	nyuryoku();	select();	kaito();	fig();		if(gpk<9){			hyoji(0, om[ran[gpk]],bn[boh[gpk]] )			hyoji(1, om[ran[gpk+1]],bn[boh[gpk+1]] )		}	kaimaru();//-----解答◯表示	//-----解答表示ここまで}function pinbu (a,b){	var a;//--- 0:pinpon 1:bu	var b;//--- 音量 0-1(0.5)	if (a==0) {		pinp.volume = b;		pinp.play();		} else {		bu.volume = b;		bu.play();		}}//-----　← M G N 押下時の処理function select(){	if((mx>0 && mx<320) && (my>440 && my<500)){			if(num==11){if(mon>0){mon=mon-1;}}		if(num==12){ran3();random(9);gpk=0;ansx=70;ansy=360;}		//----- G 押下時の数値化 →　kotae		if(num==13){				mon=mon-1;				if(mon==0){kotae=pp[0];}				if(mon==1){kotae=pp[0]*10+pp[1];}				if(mon==2){kotae=pp[0]*100+pp[1]*10+pp[2];}				mon=0;			//-----解答判定			if (kotae==om[ran[gpk]]&&(ansx==70 && ansy==360)){				kh1=1;ansx=70;ansy=410;kotae=0;pinbu(0,0.5);//-----次の解答欄へ(ansx:ansy)			}						if (kotae==om[ran[gpk]]*bn[boh[gpk]]&&(ansx==70 && ansy==410)){				kh2=1;ansx=70+haba;ansy=360;kotae=0;pinbu(0,0.5);			}						if (kotae==om[ran[gpk+1]]&&(ansx==70+haba && ansy==360)){				kh3=1;ansx=70+haba;ansy=410;kotae=0;pinbu(0,0.5);			} 						if (kotae==om[ran[gpk+1]]*bn[boh[gpk+1]]&&(ansx==70+haba && ansy==410)){				kh4=1;kotae=0;pinbu(0,0.5);			}					}//console.log(kotae)		if(num==14){//-----次の問題			gpk=gpk+2;bgcolor_kai();kaito();kh1=0;kh2=0;kh3=0;kh4=0;ansx=70;ansy=360;			if (gpk>=10){				context.fillStyle = 'bule';context.font = "24px Arial";				context.fillText("S をタッチでもう一度", 35,300);			}		}		//ten_key();	}//-----------if((mx>0 && mx<320) && (my>440 && my<500))			if((mx>60 && mx<146) && (my>330 && my<370)){		ansx=70;		ansy=360;		}		if((mx>60 && mx<146) && (my>380 && my<420)){		ansx=70;		ansy=410;		}		if((mx>60+haba && mx<146+haba) && (my>330 && my<370)){		ansx=70+haba;		ansy=360;		}		if((mx>60+haba && mx<146+haba) && (my>380 && my<420)){		ansx=70+haba;		ansy=410;		}}//---棒の長さ・3種類をランダムに10個集める boh[n] function ran3(){	p=0;	j=0;	while(p<3){		random(2);		for (j=0; j<3; j++){boh[j+p*3]=ran[j];}		p++;	}	boh[9]=Math.floor(Math.random() * 2) ;}//-----数値入力function nyuryoku(){		var h;var t; var o;		if((mx>0 && mx<230) && (my>440 && my<500)){			pp[mon]=num;			if (mon<3){mon++;}//---3桁まで入力		}}//-----数値入力表示function fig(){		var s1;		context.fillStyle = 'blue';		context.font = "24px Arial";		for (s1=0; s1<mon; s1++){		context.fillText(pp[s1],ansx+s1*13,ansy);//---13は字間		}}//--------------------乱数function random(a,b){	var a;	ran[0]=Math.floor(Math.random() * (a+1)) ;	k=1;	while(k<=a){		jjrnd=0;		dam=Math.floor(Math.random() * (a+1));		for (i=0; i<k; i++){if (ran[i]==dam){jjrnd=1;}}		if (jjrnd==1) { } else {ran[i]=dam; k++;}	}}//-----棒・メモリ・座標（関数の組み合わせ）function hyoji(a,b,c){		var a; var b; var c;		crd(a);		memori(a,b);		bar(a,b,c);}//-----テンキー表示function ten_key(){		bgcolor_btm();		context.fillStyle='#afeeee';		//fillRoundRect(context,　10,260, 23, 28, 5);		for(i=0; i<7; i++){			for(j=0; j<2; j++){				context.fillStyle='#afeeee'				fillRoundRect(context,　4+i*45,440+j*30, 43, 28, 5);				if (i<5){					context.fillStyle = 'blue';					context.font = "24px Arial";					if(j==0){context.fillText(i+1,14+4+i*45,24+440+j*28);}						else{if(i==4){context.fillText(i-4,14+4+i*45,24+440+j*28);}						else{context.fillText(i+6,14+4+i*45,24+440+j*28);}}					} else {}			}		}		context.fillStyle = 'blue';		context.font = "20px Arial";		context.fillText("←",14+5*45,24+440);		context.fillText("S",14+6*45,24+440);		context.fillText("答",14+5*45,24+440+28);		context.fillText("次",14+6*45,24+440+28);}//-----テンキー押下時の値取得function ten_key_basyo(){	rline();//点線丸囲いが描かれてしまうので入れておく	if((mx>4 && mx<49) && (my>440 && my<470)){num=1;}	if((mx>49 && mx<94) && (my>440 && my<470)){num=2;}	if((mx>94 && mx<139) && (my>440 && my<470)){num=3;}	if((mx>139 && mx<184) && (my>440 && my<470)){num=4;}	if((mx>184 && mx<229) && (my>440 && my<470)){num=5;}	if((mx>229 && mx<274) && (my>440 && my<470)){num=11;}	if((mx>274 && mx<319) && (my>440 && my<470)){num=12;}		if((mx>4 && mx<49) && (my>470 && my<500)){num=6;}	if((mx>49 && mx<94) && (my>470 && my<500)){num=7;}	if((mx>94 && mx<139) && (my>470 && my<500)){num=8;}	if((mx>139 && mx<184) && (my>470 && my<500)){num=9;}	if((mx>184 && mx<229) && (my>470 && my<500)){num=0;}	if((mx>229 && mx<274) && (my>470 && my<500)){num=13;}	if((mx>274 && mx<319) && (my>470 && my<500)){num=14;}}//-----実線にもどすfunction rline(){		context.beginPath();		context.setLineDash([]);		context.closePath();}//----------解答欄function kaito(){		context.fillStyle='rgba(0, 0, 255, 0.5)'		//context.fillRect(60,330,86,40);		context.strokeRect(60,330,86,40);		context.strokeRect(60+haba,330,86,40);		context.strokeRect(60,380,86,40);		context.strokeRect(60+haba,380,86,40);		context.fillStyle = 'blue';		context.font = "12px Arial";		context.fillText("１めもり",10,346);		context.fillText("の大きさ",10,360);		context.fillText("ぼう",10,396);		context.fillText("の大きさ",10,410);		context.fillText("１めもり",10+haba,346);		context.fillText("の大きさ",10+haba,360);		context.fillText("ぼう",10+haba,396);		context.fillText("の大きさ",10+haba,410);}//-----解答＆◯つけfunction kaimaru(){	if(kh1==1){		context.fillStyle = 'blue';		context.font = "24px Arial";		context.fillText(om[ran[gpk]],70,360);		context.fillStyle = 'red';context.font = "48px Arial";context.fillText("◯", 100,365);	}	if(kh2==1){		context.fillStyle = 'blue';		context.font = "24px Arial";		context.fillText(om[ran[gpk]]*bn[boh[gpk]],70,410);		context.fillStyle = 'red';context.font = "48px Arial";context.fillText("◯", 100,415);	}	if(kh3==1){		context.fillStyle = 'blue';		context.font = "24px Arial";		context.fillText(om[ran[gpk+1]],70+haba,360);		context.fillStyle = 'red';context.font = "48px Arial";context.fillText("◯", 100+haba,365);	}	if(kh4==1){		context.fillStyle = 'blue';		context.font = "24px Arial";		context.fillText(om[ran[gpk+1]]*bn[boh[gpk+1]],70+haba,410);		context.fillStyle = 'red';context.font = "48px Arial";context.fillText("◯", 100+haba,415);	}}//------ぼう表示function bar(a,b,c){		//---a:場所　b:ひとメモリの値　c:メモリの数		var a;var b;var c;		a=a*haba;		rline();		context.fillStyle='rgba(255, 0, 0, 0.5)'		context.fillRect(90+a-1,320-c*30,32,c*30);//少し幅を太くしてある(+1)}//-----グラフめもり表示function memori(a,b){		var a;var b;		a=a*haba;		b=b*2;		context.fillStyle = 'blue';		context.font = "18px Arial";		for(i=0; i<5; i++){			context.fillText(i*b, 25+a,320-i*60);		}}//-----座標表示function crd(a){		//---a:0 a:1		var a;		a=a*haba;		var i;		i=0;		var cc;		cc="lightblue";				for(i=0; i<8; i++){		//context.beginPath();		context.setLineDash([5, 5]);		context.moveTo(60+a,80+i*30);		context.lineTo(150+a,80+i*30);		//context.closePath();		context.strokeStyle=cc;		context.stroke();					if(i<3){			context.setLineDash([5, 5]);			context.moveTo(90+a+i*30,80);			context.lineTo(90+a+i*30,320);			//context.closePath();			context.strokeStyle=cc;			context.stroke();			}		}				//---実線にもどす		rline();		//-------------		context.moveTo(150+a,80);		context.lineTo(60+a,80);		context.lineTo(60+a,320);		for(i=0; i<5; i++){			//lline();			context.moveTo(60+a,80+i*60);			context.lineTo(150+a,80+i*60);			context.strokeStyle="black";			context.stroke();			rline();		}}//----------------	function bgcolor(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(0,0,320,500);	}	function bgcolor_md(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(0,0,320,320);	}	function bgcolor_kai(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(0,320,320,110);	}	function bgcolor_btm(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(0,430,320,70);	}//------マル四角を描画するfunction-----//------https://qiita.com/PG0721/items/6fb9e9c02675be832402---よりfunction fillRoundRect(context, x, y, w, h, r) {    createRoundRectPath(context, x, y, w, h, r);    context.fill();}function createRoundRectPath(context, x, y, w, h, r) {    context.beginPath();    context.moveTo(x + r, y);    context.lineTo(x + w - r, y);    context.arc(x + w - r, y + r, r, Math.PI * (3/2), 0, false);    context.lineTo(x + w, y + h - r);    context.arc(x + w - r, y + h - r, r, 0, Math.PI * (1/2), false);    context.lineTo(x + r, y + h);           context.arc(x + r, y + h - r, r, Math.PI * (1/2), Math.PI, false);    context.lineTo(x, y + r);    context.arc(x + r, y + r, r, Math.PI, Math.PI * (3/2), false);    context.closePath();}//------マル四角を描画するfunctionここまで-----//----Canvas全体をクリアするfunctionfunction cls(){	context.clearRect(0,0,canvas.width,canvas.height);}//-----ここからマウスの位置を取得するcanvas.addEventListener(E_TOUCHSTART, onTouchStart);	function onTouchStart(e) {	canvas.addEventListener(E_TOUCHMOVE, onTouchMove);	canvas.addEventListener(E_TOUCHEND, onTouchEnd);}function onTouchMove(e) {	//cls();}function onTouchEnd(e) {	canvas.removeEventListener(E_TOUCHMOVE, onTouchMove);	canvas.removeEventListener(E_TOUCHEND, onTouchEnd);	mx=e.pageX;	my=e.pageY;	//console.log("x= "+mx+" : y= "+my)//------コンソールに座標を表示		main();//-----メイン関数	}// デフォルトのイベントを禁止	document.ontouchmove = function(evt){	evt.preventDefault();	}}//-------最終かっこ>>>function draw(id) { 