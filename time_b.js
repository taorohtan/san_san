//---------------------------------------------------------------------// ----------------タッチイベントが利用可能かの判別-------------------------var supportTouch = 'ontouchend' in document;// イベント名var E_TOUCHSTART = supportTouch ? 'touchstart' : 'mousedown';var E_TOUCHMOVE = supportTouch ? 'touchmove' : 'mousemove';var E_TOUCHEND = supportTouch ? 'touchend' : 'mouseup';//=====================================================================function draw(id) {    var canvas = document.getElementById(id);    if (canvas == null)    	return false;		var context = canvas.getContext('2d');var mx;var my;var stX;var edX;var jt;//-----現在時刻表示判定用jt=0;var jg;//-----開始時の時計の表示を一致させるための判定用jg=0;var jmd;//-----メニュー判定用jmd=0;//-----時計表示モード　jmd=1;説明モードvar jmd2;//メニュー表示判定用jmd2=0;var jkk;//-----時刻表示の判定用(m=15 で操作）jkk=0;var japp;//-----解説加算用japp=0;var japp2;japp2=0;var hh;var mm;var mp;var mp2;var am;var ffh;var ffm;var ptn;//-----問題パターンの設定：ptn=0 はn分後・ptn=2 はn分前//-----現在時刻取得と時計描画を、1000ミリ秒ごとに実行するsetInterval(() => {	const h = _getCurTime().hour;	const min = _getCurTime().min;	const sec = _getCurTime().sec;	if (jt==0){		if(jmd==1 && jmd2==1){tokei_a(h,min,sec);tokei_b(h,min,sec);}		if(jmd==0){tokei_c(h,min,sec);}	}}, 1000);cls();bgcolor();bgcolor2();in_hhmm(hh,mm);function main(){	jt=1;	mm=1;am=0;lm=0;//-----ダミー・12時設定	cls();	bgcolor();	bgcolor2();	if(jmd==0){in_hhmm(hh,mm);}else{		syutudai();		t_move(hh,mm);		if(jmd==1 && jmd2==1){bunM();}		if(jmd==1){doit();}	}}//-----functions//-----問題メニューfunction doit(){	if(jt==0){		if((mx>128 && mx<188) && (my>230 && my<260)){ptn=0;}		if((mx>210 && mx<288) && (my>230 && my<260)){ptn=1;}		if((mx>310 && mx<370) && (my>230 && my<260)){ptn=2;}		if((mx>210 && mx<288) && (my>260 && my<280)){jt=0;jmd=0;jmd2=0;}		jg=0;my=200;if(ptn==0||ptn==1){mx=mp;}//my=200;mx=mp;はダミー	} else {}}function bunM(){	cls();	bgcolor();	bgcolor2();	jt=0;	japp=0;	japp2=0;	context.fillStyle = "blue";	context.font = "18px Arial";	context.fillText("あとの",132,240);context.fillText("時こく",132,260);	context.fillText("あいだの",214,240);context.fillText("時間",232,260);	context.fillText("まえの",314,240);context.fillText("時こく",314,260);	context.fillStyle='rgba(0, 125, 125, 0.3)';		fillRoundRect(context,　128,222, 60, 42, 6);	fillRoundRect(context,　210,222, 78, 42, 6);	fillRoundRect(context,　310,222, 60, 42, 6);	context.fillStyle='rgba(0,255,0,0.2)';	fillRoundRect(context,　210,266, 78, 20, 6);}function bun_nxt(){	context.fillStyle='rgba(255, 0, 0, 0.1)';	context.fillRect(10,205,480,50);//-----問題文枠	context.fillStyle='rgba(0,255,0,0.2)';	fillRoundRect(context,465,288,34,30, 5);	context.fillStyle = "blue";	context.font = "18px Arial";	context.fillText("次",473,310);	if(japp==0){		context.fillStyle='rgba(0,255,0,0.2)';		fillRoundRect(context,465,256,34,30, 5);		context.fillStyle = "blue";		context.font = "18px Arial";		context.fillText("M",474,278);		}}function bun00(){if(japp2==1){	jt=0;jmd=1;jmd2=1;cls();bgcolor();bgcolor2();t_line();japp=0;}else{	jt=1;	bun_nxt();		context.fillStyle = "blue";	context.font = "20px Arial";	context.fillText("　学校を8時40分に出て，30分歩くと商店がいに",20,226);	context.fillText("着きました。着いた時こくは何時何分ですか。",20,250);	context.font = "18px Arial";	if(japp==0 || japp==1 || japp==2)context.fillText("　９時までは何分ですか。",20,284);	if(japp==0 || japp==1 || japp==2)context.fillText("　９時からはあと何分ですか。",20,310);	context.fillStyle = "red";	context.font = "22px Arial";	if(japp==1 || japp==2)context.fillText("２０分です。",290,284);	if(japp==2)context.fillText("１０分です。",290,310);	if(japp==3 || japp==4){			context.fillStyle = "blue";			context.fillText("　着いた時こくは",20,297);	}	if(japp==4){			context.fillStyle = "red";			context.font = "24px Arial";			context.fillText("　９時１０分です。",180,297)	}}}function bun01(){if(japp2==1){	jt=0;jmd=1;jmd2=1;cls();bgcolor();bgcolor2();t_line();japp=0;}else{	jt=1;	bun_nxt();		context.fillStyle = "blue";	context.font = "20px Arial";	context.fillText("　商店がいを9時50分に出て，公園に10時10分に",20,226);	context.fillText("着きました。かかった時間は何分ですか。",20,250);	context.font = "18px Arial";	if(japp==0 || japp==1 || japp==2)context.fillText("　１０時までは何分ですか。",20,284);	if(japp==0 || japp==1 || japp==2)context.fillText("　１０時からは何分ですか。",20,310);	context.fillStyle = "red";	context.font = "22px Arial";	if(japp==1 || japp==2)context.fillText("１０分です。",290,284);	if(japp==2)context.fillText("１０分です。",290,310);	if(japp==3 || japp==4){			context.fillStyle = "blue";			context.fillText("　かかった時間は",20,297);	}	if(japp==4){			context.fillStyle = "red";			context.font = "24px Arial";			context.fillText("　　２０分 です。",180,297)	}}}function bun02(){if(japp2==1){	jt=0;jmd=1;jmd2=1;cls();bgcolor();bgcolor2();t_line();japp=0;}else{	jt=1;	bun_nxt();	context.fillStyle = "blue";	context.font = "20px Arial";	context.fillText("　公園を出て30分歩いて，学校に11時10分に着き",20,226);	context.fillText("ました。公園を出た時こくは何時何分ですか。",20,250);	context.font = "18px Arial";	if(japp==0 || japp==1 || japp==2)context.fillText("１１時は何分前ですか。",20,284);	if(japp==0 || japp==1 || japp==2)context.fillText("１１時から何分前ですか。",20,310);	context.fillStyle = "red";	context.font = "22px Arial";	if(japp==1 || japp==2)context.fillText("１０分前です。",320,284);	if(japp==2)context.fillText("２０分前です。",320,310);	if(japp==3 || japp==4){			context.fillStyle = "blue";			context.fillText("　公園を出た時こくは",20,297);	}	if(japp==4){			context.fillStyle = "red";			context.font = "24px Arial";			context.fillText("　１０時４０分です。",230,297);	}}}function syutudai(){	if(jmd==1){t_line();}	if(ptn==0){hh=8;mm=60-20;am=20+10;jt=1;jmd2=0;bun00();yaji_R();}	if(ptn==1){hh=9;mm=60-10;am=10;jt=1;jmd2=0;bun01();yaji_R();}	if(ptn==2){hh=10;mm=60+10;am=20+10;jt=1;jmd2=0;bun02();yaji_L();}}//-----時間線分function t_line(){	var i;	context.beginPath();	context.lineWidth = 2;//-----線の太さ	context.moveTo(10, 190);	context.lineTo(490,190);	context.closePath();	context.strokeStyle='black'	context.stroke();	for(i=0;i<25;i++){	context.beginPath();	if(i%2==0){		if (i==12){context.lineWidth=3;context.moveTo(10+i*20,170);context.lineTo(10+i*20,190);}		context.moveTo(10+i*20,180);		context.lineTo(10+i*20,190);		context.closePath();		} else {		context.lineWidth = 2;		context.moveTo(10+i*20,185);		context.lineTo(10+i*20,190);		context.closePath();		}	context.strokeStyle='black'	context.stroke();	}}//-----時間線分上のポイントを動かすfunction t_move(a,b){	var a;var b;	//if(ptn==0 || ptn==1){hh=a;mp=b;}		hh=a;mp=b;		//if(ptn==2){hh=a-1;mp=b+60;}	if(jg==0){mp2=mp;}//-----開始時の時計の表示を一致させるため		if(ptn==0){		tokei_a(hh,mp,-1);		tokei_b(hh,mp2,-1);		tmdt();		oh_gi(mp,mp2,0);//-----扇型描画		}				if(ptn==1){		tokei_a(hh,mp,-1);		tokei_b(hh+1,am,-1);		tmdt();		oh_gi(mp,mp2,0);//-----扇型描画		}		if(ptn==2){		tokei_a(hh,mp2,-1);		tokei_b(hh,mp,-1);		tmdt();		oh_gi(mp,mp2,260);//-----扇型描画		}	jg=1;function tmdt(){	if(japp2==1){}else{		context.fillStyle = 'blue';		context.font = "20px Arial";		context.fillText(hh+1+"時",240,160);		context.fillStyle = 'blue';		context.font = "20px Arial";		context.fillText(hh+"時",10,160);		context.fillStyle = 'blue';		context.font = "20px Arial";		context.fillText(hh+2+"時",456,160);	}}	if(ptn==0){if((my>160 && my<250) && mx>4*mp+10 && mx<4*(10+60)+10){mm=(mx-10)/4;mp2=mm;}}	if(ptn==1){if((my>160 && my<250) && mx>4*mp+10 && mx<4*(am+60)+10){mm=(mx-10)/4;mp2=mm;}}	if(ptn==2){if((my>160 && my<250) && mx>170 && mx<290){mm=(mx-10)/4;mp2=mm;}}	//context.beginPath();	context.lineWidth = 8;//-----線の太さ	console.log("mx= "+mx+" : my= "+my+" jmd= "+jmd+" jmd2= "+jmd2);	if(ptn==0){		if(my<250){			if(mx-10>240){				ptn_00();			}else{			context.beginPath();				context.moveTo(4*mp+10,190);				context.lineTo(4*mp2+10,190);			context.closePath();				context.strokeStyle='rgba(0, 0, 255, 0.6)';			context.stroke();						}		} else{			ptn_00();		}	}	if(ptn==1){		if(my<250){			if(mx-10>240){				ptn_00();			}else{			context.beginPath();				context.moveTo(4*mp+10,190);				context.lineTo(4*mp2+10,190);			context.closePath();				context.strokeStyle='rgba(0, 0, 255, 0.6)';			context.stroke();						}		} else{			ptn_00();		}	}		if(ptn==2){//-----前の時間		if(my<250){			if(mx-10<240){				ptn_00();			}else{			context.beginPath();				context.moveTo(4*mp+10,190);				context.lineTo(4*mp2+10,190);			context.closePath();				//context.strokeStyle='rgba(0, 0, 255, 0.6)';				context.strokeStyle='rgba(225, 0, 0, 0.5)';			context.stroke();						}		} else{			ptn_00();		}	}			function ptn_00(){			context.beginPath();				context.moveTo(4*mp+10,190);				context.lineTo(240+10,190);			context.closePath();				if(ptn==2){context.strokeStyle='rgba(225, 0, 0, 0.5)';}				else{context.strokeStyle='rgba(0, 0, 255, 0.6)';}			context.stroke();			context.beginPath();				context.moveTo(240+10,190);				context.lineTo(4*mp2+10,190);			context.closePath();				if(ptn==2){context.strokeStyle='rgba(0, 0, 255, 0.6)';}				else{context.strokeStyle='rgba(225, 0, 0, 0.5)';}			context.stroke();	}		if(jt==1 || japp2==0){//-----メニュー表示のとき以外のデータを表示（jt=0がメニュー表示）		context.beginPath();				if(ptn==0){		context.arc(4*mp2+10,190,6,0,2*Math.PI,false);		context.arc(4*mp+10,190,6,0,2*Math.PI,false);		}				if(ptn==1){		context.arc(4*mp+10,190,6,0,2*Math.PI,false);		context.arc(4*(am+60)+10,190,6,0,2*Math.PI,false);		}		if(ptn==2){		context.arc(4*mp+10,190,6,0,2*Math.PI,false);		context.arc(4*mp2+10,190,6,0,2*Math.PI,false);		}		context.fillStyle='rgba(0, 0, 255, 1)';		context.fill();		}else{}}//-----時間線分上のポイントを動かすここまで//----------円弧（前は扇型）を描画function oh_gi(a,b,c){var a;var b;var c;//---a=mp:b=mp2 a=mp:b=am a=mp2:b=mp c=間隔(260)context.fillStyle='rgba(0, 0, 255, 0.1)';if(ptn==0 || ptn==1){	if (my<250){	if (mx-10>240){		og00();		}else{		context.lineWidth = 14;		context.beginPath();		context.arc(120+c, 90, 60, (a-15) * 6 * Math.PI / 180, (b-15) * 6 * Math.PI / 180, false);		//context.lineTo(120+c,90);		context.strokeStyle='rgba(0, 0, 255, 0.2)';		context.stroke();		context.closePath();		}	}else{		og00();	}}if(ptn==2){	if (my<250){	if (mx-10<240){		og00();		}else{		context.lineWidth = 14;		context.beginPath();		context.arc(120+c, 90, 60, (a-15) * 6 * Math.PI / 180, (b-15) * 6 * Math.PI / 180, true);		context.strokeStyle='rgba(255, 0, 0, 0.2)';		//context.lineTo(120+c,90);		context.stroke();		context.closePath();		}	}else{		og00();	}}	function og00(){		context.beginPath();		context.lineWidth = 14;			if(ptn==2){context.arc(120+c, 90, 60, (a-15) * 6 * Math.PI / 180, (60-15) * 6 * Math.PI / 180, true);}			else{context.arc(120+c, 90, 60, (a-15) * 6 * Math.PI / 180, (60-15) * 6 * Math.PI / 180, false);}			//context.strokeStyle='rgba(0, 0, 255, 0.2)';				if(ptn==2){context.strokeStyle='rgba(225, 0, 0, 0.2)';}				else{context.strokeStyle='rgba(0, 0, 255, 0.2)';}			//context.lineTo(120+c,90);			context.stroke();		context.closePath();		context.beginPath();			if(ptn==2){context.arc(120+c, 90, 60, (60-15) * 6 * Math.PI / 180, (b-15) * 6 * Math.PI / 180, true);}			else{context.arc(120+c, 90, 60, (60-15) * 6 * Math.PI / 180, (b-15) * 6 * Math.PI / 180, false);}			//context.strokeStyle='rgba(255, 0, 0, 0.2)';				if(ptn==2){context.strokeStyle='rgba(0, 0, 255, 0.2)';}				else{context.strokeStyle='rgba(225, 0, 0, 0.2)';}			//context.lineTo(120+c,90);			context.stroke();		context.closePath();	}}//----------扇型を描画ここまで//-----矢印function yaji_R(){	context.beginPath();	context.moveTo(270,90);	context.lineTo(250,110);	context.lineTo(250,100);	context.lineTo(230,100);	context.lineTo(230,80);	context.lineTo(250,80);	context.lineTo(250,70);	context.closePath();	context.fillStyle='rgba(0, 0, 255, 0.3)';	context.fill();}function yaji_L(){	context.beginPath();	context.moveTo(230,90);	context.lineTo(250,110);	context.lineTo(250,100);	context.lineTo(270,100);	context.lineTo(270,80);	context.lineTo(250,80);	context.lineTo(250,70);	context.closePath();	context.fillStyle='rgba(0, 0, 255, 0.3)';	context.fill();}//---時計Afunction tokei_a(h,m,s){var h;var m;var s;memori(120,90,80);t_moji(120,90,90,"18px Arial","blue");j_koku(120,90,h,m,s);context.beginPath();context.lineWidth = 2;context.arc(120,90,80,0,2*Math.PI,false);context.strokeStyle='rgba(0, 0, 255, 1)';context.stroke();}//-----時計Bfunction tokei_b(h,m,s){var h;var m;var s;memori(380,90,80);t_moji(380,90,90,"18px Arial","blue");j_koku(380,90,h,m,s);context.beginPath();context.lineWidth = 2;context.arc(380,90,80,0,2*Math.PI,false);context.strokeStyle='rgba(0, 0, 255, 1)';context.stroke();}//-----時計Cfunction tokei_c(h,m,s){var h;var m;var s;memori(250,135,105);t_moji(238,128,100,"24px Arial","blue");j_koku(250,135,h,m,s);context.beginPath();context.lineWidth = 2;context.arc(250,135,105,0,2*Math.PI,false);context.strokeStyle='rgba(0, 0, 255, 1)';context.stroke();}//-----時計Cの操作関数function in_hhmm(a,b){	var a;var b;	hh=a;mp=b;		if(jg==0){mp2=mp;}//-----開始時の時計の表示を一致させるため	disp_t();//--------------時計・時刻表示	jg=1;}function disp_t(){	context.fillStyle='rgba(0,255,0,0.2)';	fillRoundRect(context,188,256,126,30, 5);//-----時刻表示用スペース	if((mx>190 && mx<320)&&(my>260 && my<280)){if(jkk==0){jkk=1;}else{jkk=0;}}	if((mx>160 && mx<180)&&(my>260 && my<280)){mp2=mp2-1;}	if((mx>326 && mx<346)&&(my>260 && my<280)){mp2=mp2+1;}	//-----メニュー	fillRoundRect(context,465,256,34,30, 5);	//if((mx>465 && mx<499) && (my>256 && my<286)){jt=0;jmd=1;jmd2=1;}//bunM();}	fillRoundRect(context,465,288,34,30, 5);	if((mx>465 && mx<499) && (my>288 && my<318)){jt=0;if(jkk==1){jkk=0;}}//-----現在時刻表示	context.fillStyle = "blue";	context.font = "18px Arial";	context.fillText("M",474,278);	context.fillText("T",476,310);			hh=11;	if(my>160 && my<250){		if(edX-stX>0){mp2=mp2+1;}else{mp2=mp2-1;}	}		tokei_c(hh+1,mp2,-1);//-----時刻表示用	if(jkk==0){}else{		ffh=Math.floor(mp2/60);		ffm=mp2%60;		if(mp2<-660){ffh=ffh+12*Math.floor(Math.abs(mp2)/660);}		if(mp2>=1500){ffh=ffh-12*(Math.floor(mp2/720)-1);}			if(ffh==0){ffh=ffh+12;}			if(ffh<0){ffh=ffh+12;}			if(ffh>12){ffh=ffh-12;}			if(ffm<0){ffm=60+ffm;}			if(ffm!=0){					context.fillText(ffh,194,280);					context.fillText(" 時 ",218,280);					context.fillText(ffm,256,280);					context.fillText(" 分",280,280);					}else{					context.fillText(ffh,194,280);					context.fillText(" 時 ",218,280);					}			context.fillStyle = 'blue';			context.font = "28px Arial";		}	//-----時計を動かす△マーク	context.beginPath();	context.lineWidth = 2;//-----線の太さ	context.moveTo(180,260);	context.lineTo(180,280);	context.lineTo(160,270);	context.closePath();	context.fillStyle='rgba(0,0,255,0.2)';	context.fill();	context.beginPath();	context.moveTo(322,260);	context.lineTo(322,280);	context.lineTo(342,270);	context.closePath();	context.fillStyle='rgba(0,0,255,0.2)';	context.fill();	context.beginPath();	context.moveTo(180,235);	context.lineTo(180,255);	context.lineTo(100,245);	context.closePath();	context.fillStyle='rgba(0,0,255,0.2)';	context.fill();	context.beginPath();	context.moveTo(322,235);	context.lineTo(322,255);	context.lineTo(402,245);	context.closePath();	context.fillStyle='rgba(0,0,255,0.2)';	context.fill();	//-----時計を動かす△マーク・ここまで}//-----時計Cの操作関数ここまで//-----時刻表示function j_koku(a, b, c, d, e){	var a; var b; var c; var d;//a:x b:y c:時 d:分 e:秒	  const h = c;      const min = d;	  const sec = e;      //短針を描画      const hourR = h * 30 * Math.PI / 180 + min * 0.5 * Math.PI / 180;      if(jmd==1){	  _setCtxStyle(context, '', 'red', 4);      _drawCtx(context, a, b, hourR, 0, -46);	  }else{	  _setCtxStyle(context, '', 'red', 6);	  _drawCtx(context, a, b, hourR, 0, -62);	  }      //長針を描画      const minR = min * 6 * Math.PI / 180;	  if(jmd==1){      _setCtxStyle(context, '', 'blue', 4);      _drawCtx(context, a, b, minR, 0, -66);	  }else{	  _setCtxStyle(context, '', 'blue', 6);	  _drawCtx(context, a, b, minR, 0, -90);	  }	  //秒針を描画	  if (e==-1) { } else {      const secR = sec * 6 * Math.PI / 180;	  if(jmd==1){      _setCtxStyle(context, '', 'green', 2);      _drawCtx(context, a, b, secR, 0, -56);	  }else{	  _setCtxStyle(context, '', 'green', 2);	  _drawCtx(context, a, b, secR, 0, -74);	  }	  }}function t_moji(a,b,h,s,c){//-----文字表示	var a;var b;var h;var s;var c;//a:x b:y h:半径 s:フォント"18px Arial" c:フォント色	var j;var k;		if(jmd==1){k=30;}else{k=20;}        const r12 = 360 / 12;        const hankei = h;        const moziPos = h - k;//30 ;//-20        const MathPi = Math.PI / 180;	const deg = j * r12;		for( j = 0 ; j < 12 ; j ++){        const deg = j * r12;		const mojiX = hankei + moziPos * Math.sin( deg * MathPi )+a-95;        const mojiY = hankei - moziPos * Math.cos( deg * MathPi )+b-84;		context.fillStyle = c;		context.font = s;	if (j==0){context.fillText(j+12,mojiX-6,mojiY);}else{context.fillText(j,mojiX,mojiY);}	}}//-----目盛表示function memori(a,b,c){	var a;var b;var c;//a:x b:y c:半径	context.beginPath();    context.arc(a, b, c, 0, 2 * Math.PI); //円のパスを設定　・・・補足１	context.fillStyle='#ffffe0'    context.fill(); //円のパスを塗りつぶす      //目盛を描画　・・・補足２      for (let i = 0; i < 60; i++) {          let r = 6 * Math.PI / 180 * i;           const w = i % 5 === 0 ? 4 : 1;           _setCtxStyle(context, '#ffffe0', 'black', w);          _drawCtx(context, a,b,r,c-10, 4);       }}function _setCtxStyle(context, fillColor, strokeColor, lineWidth) {      context.fillStyle = fillColor;      context.strokeStyle = strokeColor;      context.lineWidth = lineWidth;      context.lineCap = 'round';}function _drawCtx(context, a,b,rotation, moveToY = 0, length) {      var a; var b;//a:x b:y      context.save();      context.translate(a, b);      context.rotate(rotation);      context.beginPath();      context.moveTo(0, moveToY);      context.lineTo(0, moveToY + length);      context.stroke();      context.restore();}//現在時刻を取得function _getCurTime() {	const cur = new Date();	const time = {		hour : cur.getHours() % 12, //12時間制の数字		hourOriginal : cur.getHours(), //24時間制の数字		min :  cur.getMinutes(),		sec : cur.getSeconds()	};	return time;}//----------------function bgcolor(){		context.fillStyle='rgba(0, 255, 0, 0.5)'		context.fillRect(0,0,500,320);}function bgcolor2(){		context.fillStyle='#ffffe0'//'rgba(0, 255, 0, 0.5)'		context.fillRect(0,190,500,320);}	//-----実線にもどすfunction rline(){		context.beginPath();		context.setLineDash([]);		context.closePath();}//------マル四角を描画するfunction-----//------https://qiita.com/PG0721/items/6fb9e9c02675be832402---よりfunction fillRoundRect(context, x, y, w, h, r) {    createRoundRectPath(context, x, y, w, h, r);    context.fill();}function createRoundRectPath(context, x, y, w, h, r) {    context.beginPath();    context.moveTo(x + r, y);    context.lineTo(x + w - r, y);    context.arc(x + w - r, y + r, r, Math.PI * (3/2), 0, false);    context.lineTo(x + w, y + h - r);    context.arc(x + w - r, y + h - r, r, 0, Math.PI * (1/2), false);    context.lineTo(x + r, y + h);           context.arc(x + r, y + h - r, r, Math.PI * (1/2), Math.PI, false);    context.lineTo(x, y + r);    context.arc(x + r, y + r, r, Math.PI, Math.PI * (3/2), false);    context.closePath();}//------マル四角を描画するfunctionここまで-----//----Canvas全体をクリアするfunctionfunction cls(){	context.clearRect(0,0,canvas.width,canvas.height);}//-----ここからマウスの位置を取得するcanvas.addEventListener(E_TOUCHSTART, onTouchStart);	function onTouchStart(e) {	canvas.addEventListener(E_TOUCHMOVE, onTouchMove);	canvas.addEventListener(E_TOUCHEND, onTouchEnd);		if(my>160 && my<250){stX=e.pageX;}}function onTouchMove(e) {	canvas.addEventListener(E_TOUCHMOVE, onTouchMove);	canvas.addEventListener(E_TOUCHEND, onTouchEnd);		mx=e.pageX;	my=e.pageY;		if(my>160 && my<250){edX=e.pageX;}		if(my>160 && my<250){	main();	}}function onTouchEnd(e) {	canvas.removeEventListener(E_TOUCHMOVE, onTouchMove);	canvas.removeEventListener(E_TOUCHEND, onTouchEnd);	mx=e.pageX;	my=e.pageY;		if((mx>465 && mx<499) && (my>256 && my<286)){jt=0;jmd=1;jmd2=1;japp=0;}//bunM();}	if(japp==0){if((mx>465 && mx<499) && (my>256 && my<286)){jt=0;jmd=1;jmd2=1;japp=0;japp2=1;}}	if((mx>465 && mx<499) && (my>290 && my<320)){japp=japp+1;if(japp==5)japp=0;}	doit();	main();}// デフォルトのイベントを禁止	document.ontouchmove = function(evt){	evt.preventDefault();	}}//-------最終かっこ>>>function draw(id) { 